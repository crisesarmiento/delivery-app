---
description: Api Design Standards and Mock implementation and Security Implementations
globs: 
alwaysApply: false
---
## API Design Standards (Mocked)
- **Api responses**: Use Axios for hooks about returning information but the response should be the mocked data for now.
- **Mock Implementation**: 
  - Use simple JSON files or in-memory data structures for mocks (e.g., `branchesMock.ts`).
- **Endpoints**:
  - `/api/branches`, `/api/branches/:id`
  - `/api/products`, `/api/products/:id`
  - `/api/orders`, `/api/orders/:id`
- **Response Format**:
  - Success: `{"success": true, "data": {...}}`
  - Error: `{"success": false, "error": "NotFound", "message": "Sucursal no encontrada"}`

---

### Example Mock Implementation
- Mocked data is saved in `src/mocks` with the format (e.g., `branches.mock.ts`). You can use `data.ts` file to centralize the mocks.
- **`/src/mocks/branches.mock.ts`**:
  ```ts
  export const branches = [
    { id: 1, nombre: 'Sucursal Centro', direccion: 'Calle Principal 123' },
    { id: 2, nombre: 'Sucursal Norte', direccion: 'Avenida Norte 456' },
  ];
  ```
- **Hook Usage**:
  ```ts
  import { branches } from '../mocks/branches';

  export function useBranches() {
    return { data: branches, isLoading: false, error: null };
  }
  ```

---

## Security Implementations
- Use fake data in mocks (e.g., random IDs, no real names).
- Treat mocked data as if it were live for secure frontend handling.